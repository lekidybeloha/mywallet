/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pace.min.js":
/*!**********************************!*\
  !*** ./resources/js/pace.min.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*! pace 1.0.0 */\n(function () {\n  var a,\n      b,\n      c,\n      d,\n      e,\n      f,\n      g,\n      h,\n      i,\n      j,\n      k,\n      l,\n      m,\n      n,\n      o,\n      p,\n      q,\n      r,\n      s,\n      t,\n      u,\n      _v,\n      w,\n      x,\n      y,\n      z,\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I,\n      J,\n      K,\n      L,\n      M,\n      N,\n      O,\n      P,\n      Q,\n      R,\n      S,\n      T,\n      U,\n      V,\n      W,\n      X = [].slice,\n      Y = {}.hasOwnProperty,\n      Z = function Z(a, b) {\n    function c() {\n      this.constructor = a;\n    }\n\n    for (var d in b) {\n      Y.call(b, d) && (a[d] = b[d]);\n    }\n\n    return c.prototype = b.prototype, a.prototype = new c(), a.__super__ = b.prototype, a;\n  },\n      $ = [].indexOf || function (a) {\n    for (var b = 0, c = this.length; c > b; b++) {\n      if (b in this && this[b] === a) return b;\n    }\n\n    return -1;\n  };\n\n  for (u = {\n    catchupTime: 100,\n    initialRate: .03,\n    minTime: 250,\n    ghostTime: 100,\n    maxProgressPerFrame: 20,\n    easeFactor: 1.25,\n    startOnPageLoad: !0,\n    restartOnPushState: !0,\n    restartOnRequestAfter: 500,\n    target: \"body\",\n    elements: {\n      checkInterval: 100,\n      selectors: [\"body\"]\n    },\n    eventLag: {\n      minSamples: 10,\n      sampleCount: 3,\n      lagThreshold: 3\n    },\n    ajax: {\n      trackMethods: [\"GET\"],\n      trackWebSockets: !0,\n      ignoreURLs: []\n    }\n  }, C = function C() {\n    var a;\n    return null != (a = \"undefined\" != typeof performance && null !== performance && \"function\" == typeof performance.now ? performance.now() : void 0) ? a : +new Date();\n  }, E = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame, t = window.cancelAnimationFrame || window.mozCancelAnimationFrame, null == E && (E = function E(a) {\n    return setTimeout(a, 50);\n  }, t = function t(a) {\n    return clearTimeout(a);\n  }), G = function G(a) {\n    var b, _c;\n\n    return b = C(), (_c = function c() {\n      var d;\n      return d = C() - b, d >= 33 ? (b = C(), a(d, function () {\n        return E(_c);\n      })) : setTimeout(_c, 33 - d);\n    })();\n  }, F = function F() {\n    var a, b, c;\n    return c = arguments[0], b = arguments[1], a = 3 <= arguments.length ? X.call(arguments, 2) : [], \"function\" == typeof c[b] ? c[b].apply(c, a) : c[b];\n  }, _v = function v() {\n    var a, b, c, d, e, f, g;\n\n    for (b = arguments[0], d = 2 <= arguments.length ? X.call(arguments, 1) : [], f = 0, g = d.length; g > f; f++) {\n      if (c = d[f]) for (a in c) {\n        Y.call(c, a) && (e = c[a], null != b[a] && \"object\" == _typeof(b[a]) && null != e && \"object\" == _typeof(e) ? _v(b[a], e) : b[a] = e);\n      }\n    }\n\n    return b;\n  }, q = function q(a) {\n    var b, c, d, e, f;\n\n    for (c = b = 0, e = 0, f = a.length; f > e; e++) {\n      d = a[e], c += Math.abs(d), b++;\n    }\n\n    return c / b;\n  }, x = function x(a, b) {\n    var c, d, e;\n\n    if (null == a && (a = \"options\"), null == b && (b = !0), e = document.querySelector(\"[data-pace-\" + a + \"]\")) {\n      if (c = e.getAttribute(\"data-pace-\" + a), !b) return c;\n\n      try {\n        return JSON.parse(c);\n      } catch (f) {\n        return d = f, \"undefined\" != typeof console && null !== console ? console.error(\"Error parsing inline pace options\", d) : void 0;\n      }\n    }\n  }, g = function () {\n    function a() {}\n\n    return a.prototype.on = function (a, b, c, d) {\n      var e;\n      return null == d && (d = !1), null == this.bindings && (this.bindings = {}), null == (e = this.bindings)[a] && (e[a] = []), this.bindings[a].push({\n        handler: b,\n        ctx: c,\n        once: d\n      });\n    }, a.prototype.once = function (a, b, c) {\n      return this.on(a, b, c, !0);\n    }, a.prototype.off = function (a, b) {\n      var c, d, e;\n\n      if (null != (null != (d = this.bindings) ? d[a] : void 0)) {\n        if (null == b) return delete this.bindings[a];\n\n        for (c = 0, e = []; c < this.bindings[a].length;) {\n          e.push(this.bindings[a][c].handler === b ? this.bindings[a].splice(c, 1) : c++);\n        }\n\n        return e;\n      }\n    }, a.prototype.trigger = function () {\n      var a, b, c, d, e, f, g, h, i;\n\n      if (c = arguments[0], a = 2 <= arguments.length ? X.call(arguments, 1) : [], null != (g = this.bindings) ? g[c] : void 0) {\n        for (e = 0, i = []; e < this.bindings[c].length;) {\n          h = this.bindings[c][e], d = h.handler, b = h.ctx, f = h.once, d.apply(null != b ? b : this, a), i.push(f ? this.bindings[c].splice(e, 1) : e++);\n        }\n\n        return i;\n      }\n    }, a;\n  }(), j = window.Pace || {}, window.Pace = j, _v(j, g.prototype), D = j.options = _v({}, u, window.paceOptions, x()), U = [\"ajax\", \"document\", \"eventLag\", \"elements\"], Q = 0, S = U.length; S > Q; Q++) {\n    K = U[Q], D[K] === !0 && (D[K] = u[K]);\n  }\n\n  i = function (a) {\n    function b() {\n      return V = b.__super__.constructor.apply(this, arguments);\n    }\n\n    return Z(b, a), b;\n  }(Error), b = function () {\n    function a() {\n      this.progress = 0;\n    }\n\n    return a.prototype.getElement = function () {\n      var a;\n\n      if (null == this.el) {\n        if (a = document.querySelector(D.target), !a) throw new i();\n        this.el = document.createElement(\"div\"), this.el.className = \"pace pace-active\", document.body.className = document.body.className.replace(/pace-done/g, \"\"), document.body.className += \" pace-running\", this.el.innerHTML = '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>', null != a.firstChild ? a.insertBefore(this.el, a.firstChild) : a.appendChild(this.el);\n      }\n\n      return this.el;\n    }, a.prototype.finish = function () {\n      var a;\n      return a = this.getElement(), a.className = a.className.replace(\"pace-active\", \"\"), a.className += \" pace-inactive\", document.body.className = document.body.className.replace(\"pace-running\", \"\"), document.body.className += \" pace-done\";\n    }, a.prototype.update = function (a) {\n      return this.progress = a, this.render();\n    }, a.prototype.destroy = function () {\n      try {\n        this.getElement().parentNode.removeChild(this.getElement());\n      } catch (a) {\n        i = a;\n      }\n\n      return this.el = void 0;\n    }, a.prototype.render = function () {\n      var a, b, c, d, e, f, g;\n      if (null == document.querySelector(D.target)) return !1;\n\n      for (a = this.getElement(), d = \"translate3d(\" + this.progress + \"%, 0, 0)\", g = [\"webkitTransform\", \"msTransform\", \"transform\"], e = 0, f = g.length; f > e; e++) {\n        b = g[e], a.children[0].style[b] = d;\n      }\n\n      return (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) && (a.children[0].setAttribute(\"data-progress-text\", \"\" + (0 | this.progress) + \"%\"), this.progress >= 100 ? c = \"99\" : (c = this.progress < 10 ? \"0\" : \"\", c += 0 | this.progress), a.children[0].setAttribute(\"data-progress\", \"\" + c)), this.lastRenderedProgress = this.progress;\n    }, a.prototype.done = function () {\n      return this.progress >= 100;\n    }, a;\n  }(), h = function () {\n    function a() {\n      this.bindings = {};\n    }\n\n    return a.prototype.trigger = function (a, b) {\n      var c, d, e, f, g;\n\n      if (null != this.bindings[a]) {\n        for (f = this.bindings[a], g = [], d = 0, e = f.length; e > d; d++) {\n          c = f[d], g.push(c.call(this, b));\n        }\n\n        return g;\n      }\n    }, a.prototype.on = function (a, b) {\n      var c;\n      return null == (c = this.bindings)[a] && (c[a] = []), this.bindings[a].push(b);\n    }, a;\n  }(), P = window.XMLHttpRequest, O = window.XDomainRequest, N = window.WebSocket, w = function w(a, b) {\n    var c, d, e, f;\n    f = [];\n\n    for (d in b.prototype) {\n      try {\n        e = b.prototype[d], f.push(null == a[d] && \"function\" != typeof e ? a[d] = e : void 0);\n      } catch (g) {\n        c = g;\n      }\n    }\n\n    return f;\n  }, A = [], j.ignore = function () {\n    var a, b, c;\n    return b = arguments[0], a = 2 <= arguments.length ? X.call(arguments, 1) : [], A.unshift(\"ignore\"), c = b.apply(null, a), A.shift(), c;\n  }, j.track = function () {\n    var a, b, c;\n    return b = arguments[0], a = 2 <= arguments.length ? X.call(arguments, 1) : [], A.unshift(\"track\"), c = b.apply(null, a), A.shift(), c;\n  }, J = function J(a) {\n    var b;\n    if (null == a && (a = \"GET\"), \"track\" === A[0]) return \"force\";\n\n    if (!A.length && D.ajax) {\n      if (\"socket\" === a && D.ajax.trackWebSockets) return !0;\n      if (b = a.toUpperCase(), $.call(D.ajax.trackMethods, b) >= 0) return !0;\n    }\n\n    return !1;\n  }, k = function (a) {\n    function b() {\n      var a,\n          c = this;\n      b.__super__.constructor.apply(this, arguments), a = function a(_a) {\n        var b;\n        return b = _a.open, _a.open = function (d, e) {\n          return J(d) && c.trigger(\"request\", {\n            type: d,\n            url: e,\n            request: _a\n          }), b.apply(_a, arguments);\n        };\n      }, window.XMLHttpRequest = function (b) {\n        var c;\n        return c = new P(b), a(c), c;\n      };\n\n      try {\n        w(window.XMLHttpRequest, P);\n      } catch (d) {}\n\n      if (null != O) {\n        window.XDomainRequest = function () {\n          var b;\n          return b = new O(), a(b), b;\n        };\n\n        try {\n          w(window.XDomainRequest, O);\n        } catch (d) {}\n      }\n\n      if (null != N && D.ajax.trackWebSockets) {\n        window.WebSocket = function (a, b) {\n          var d;\n          return d = null != b ? new N(a, b) : new N(a), J(\"socket\") && c.trigger(\"request\", {\n            type: \"socket\",\n            url: a,\n            protocols: b,\n            request: d\n          }), d;\n        };\n\n        try {\n          w(window.WebSocket, N);\n        } catch (d) {}\n      }\n    }\n\n    return Z(b, a), b;\n  }(h), R = null, y = function y() {\n    return null == R && (R = new k()), R;\n  }, I = function I(a) {\n    var b, c, d, e;\n\n    for (e = D.ajax.ignoreURLs, c = 0, d = e.length; d > c; c++) {\n      if (b = e[c], \"string\" == typeof b) {\n        if (-1 !== a.indexOf(b)) return !0;\n      } else if (b.test(a)) return !0;\n    }\n\n    return !1;\n  }, y().on(\"request\", function (b) {\n    var c, d, e, f, g;\n    return f = b.type, e = b.request, g = b.url, I(g) ? void 0 : j.running || D.restartOnRequestAfter === !1 && \"force\" !== J(f) ? void 0 : (d = arguments, c = D.restartOnRequestAfter || 0, \"boolean\" == typeof c && (c = 0), setTimeout(function () {\n      var b, c, g, h, i, k;\n\n      if (b = \"socket\" === f ? e.readyState < 2 : 0 < (h = e.readyState) && 4 > h) {\n        for (j.restart(), i = j.sources, k = [], c = 0, g = i.length; g > c; c++) {\n          if (K = i[c], K instanceof a) {\n            K.watch.apply(K, d);\n            break;\n          }\n\n          k.push(void 0);\n        }\n\n        return k;\n      }\n    }, c));\n  }), a = function () {\n    function a() {\n      var a = this;\n      this.elements = [], y().on(\"request\", function () {\n        return a.watch.apply(a, arguments);\n      });\n    }\n\n    return a.prototype.watch = function (a) {\n      var b, c, d, e;\n      return d = a.type, b = a.request, e = a.url, I(e) ? void 0 : (c = \"socket\" === d ? new n(b) : new o(b), this.elements.push(c));\n    }, a;\n  }(), o = function () {\n    function a(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this;\n      if (this.progress = 0, null != window.ProgressEvent) for (c = null, a.addEventListener(\"progress\", function (a) {\n        return h.progress = a.lengthComputable ? 100 * a.loaded / a.total : h.progress + (100 - h.progress) / 2;\n      }, !1), g = [\"load\", \"abort\", \"timeout\", \"error\"], d = 0, e = g.length; e > d; d++) {\n        b = g[d], a.addEventListener(b, function () {\n          return h.progress = 100;\n        }, !1);\n      } else f = a.onreadystatechange, a.onreadystatechange = function () {\n        var b;\n        return 0 === (b = a.readyState) || 4 === b ? h.progress = 100 : 3 === a.readyState && (h.progress = 50), \"function\" == typeof f ? f.apply(null, arguments) : void 0;\n      };\n    }\n\n    return a;\n  }(), n = function () {\n    function a(a) {\n      var b,\n          c,\n          d,\n          e,\n          f = this;\n\n      for (this.progress = 0, e = [\"error\", \"open\"], c = 0, d = e.length; d > c; c++) {\n        b = e[c], a.addEventListener(b, function () {\n          return f.progress = 100;\n        }, !1);\n      }\n    }\n\n    return a;\n  }(), d = function () {\n    function a(a) {\n      var b, c, d, f;\n\n      for (null == a && (a = {}), this.elements = [], null == a.selectors && (a.selectors = []), f = a.selectors, c = 0, d = f.length; d > c; c++) {\n        b = f[c], this.elements.push(new e(b));\n      }\n    }\n\n    return a;\n  }(), e = function () {\n    function a(a) {\n      this.selector = a, this.progress = 0, this.check();\n    }\n\n    return a.prototype.check = function () {\n      var a = this;\n      return document.querySelector(this.selector) ? this.done() : setTimeout(function () {\n        return a.check();\n      }, D.elements.checkInterval);\n    }, a.prototype.done = function () {\n      return this.progress = 100;\n    }, a;\n  }(), c = function () {\n    function a() {\n      var a,\n          b,\n          c = this;\n      this.progress = null != (b = this.states[document.readyState]) ? b : 100, a = document.onreadystatechange, document.onreadystatechange = function () {\n        return null != c.states[document.readyState] && (c.progress = c.states[document.readyState]), \"function\" == typeof a ? a.apply(null, arguments) : void 0;\n      };\n    }\n\n    return a.prototype.states = {\n      loading: 0,\n      interactive: 50,\n      complete: 100\n    }, a;\n  }(), f = function () {\n    function a() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f = this;\n      this.progress = 0, a = 0, e = [], d = 0, c = C(), b = setInterval(function () {\n        var g;\n        return g = C() - c - 50, c = C(), e.push(g), e.length > D.eventLag.sampleCount && e.shift(), a = q(e), ++d >= D.eventLag.minSamples && a < D.eventLag.lagThreshold ? (f.progress = 100, clearInterval(b)) : f.progress = 100 * (3 / (a + 3));\n      }, 50);\n    }\n\n    return a;\n  }(), m = function () {\n    function a(a) {\n      this.source = a, this.last = this.sinceLastUpdate = 0, this.rate = D.initialRate, this.catchup = 0, this.progress = this.lastProgress = 0, null != this.source && (this.progress = F(this.source, \"progress\"));\n    }\n\n    return a.prototype.tick = function (a, b) {\n      var c;\n      return null == b && (b = F(this.source, \"progress\")), b >= 100 && (this.done = !0), b === this.last ? this.sinceLastUpdate += a : (this.sinceLastUpdate && (this.rate = (b - this.last) / this.sinceLastUpdate), this.catchup = (b - this.progress) / D.catchupTime, this.sinceLastUpdate = 0, this.last = b), b > this.progress && (this.progress += this.catchup * a), c = 1 - Math.pow(this.progress / 100, D.easeFactor), this.progress += c * this.rate * a, this.progress = Math.min(this.lastProgress + D.maxProgressPerFrame, this.progress), this.progress = Math.max(0, this.progress), this.progress = Math.min(100, this.progress), this.lastProgress = this.progress, this.progress;\n    }, a;\n  }(), L = null, H = null, r = null, M = null, p = null, s = null, j.running = !1, z = function z() {\n    return D.restartOnPushState ? j.restart() : void 0;\n  }, null != window.history.pushState && (T = window.history.pushState, window.history.pushState = function () {\n    return z(), T.apply(window.history, arguments);\n  }), null != window.history.replaceState && (W = window.history.replaceState, window.history.replaceState = function () {\n    return z(), W.apply(window.history, arguments);\n  }), l = {\n    ajax: a,\n    elements: d,\n    document: c,\n    eventLag: f\n  }, (B = function B() {\n    var a, c, d, e, f, g, h, i;\n\n    for (j.sources = L = [], g = [\"ajax\", \"elements\", \"document\", \"eventLag\"], c = 0, e = g.length; e > c; c++) {\n      a = g[c], D[a] !== !1 && L.push(new l[a](D[a]));\n    }\n\n    for (i = null != (h = D.extraSources) ? h : [], d = 0, f = i.length; f > d; d++) {\n      K = i[d], L.push(new K(D));\n    }\n\n    return j.bar = r = new b(), H = [], M = new m();\n  })(), j.stop = function () {\n    return j.trigger(\"stop\"), j.running = !1, r.destroy(), s = !0, null != p && (\"function\" == typeof t && t(p), p = null), B();\n  }, j.restart = function () {\n    return j.trigger(\"restart\"), j.stop(), j.start();\n  }, j.go = function () {\n    var a;\n    return j.running = !0, r.render(), a = C(), s = !1, p = G(function (b, c) {\n      var d, e, f, g, h, i, k, l, n, o, p, q, t, u, v, w;\n\n      for (l = 100 - r.progress, e = p = 0, f = !0, i = q = 0, u = L.length; u > q; i = ++q) {\n        for (K = L[i], o = null != H[i] ? H[i] : H[i] = [], h = null != (w = K.elements) ? w : [K], k = t = 0, v = h.length; v > t; k = ++t) {\n          g = h[k], n = null != o[k] ? o[k] : o[k] = new m(g), f &= n.done, n.done || (e++, p += n.tick(b));\n        }\n      }\n\n      return d = p / e, r.update(M.tick(b, d)), r.done() || f || s ? (r.update(100), j.trigger(\"done\"), setTimeout(function () {\n        return r.finish(), j.running = !1, j.trigger(\"hide\");\n      }, Math.max(D.ghostTime, Math.max(D.minTime - (C() - a), 0)))) : c();\n    });\n  }, j.start = function (a) {\n    _v(D, a), j.running = !0;\n\n    try {\n      r.render();\n    } catch (b) {\n      i = b;\n    }\n\n    return document.querySelector(\".pace\") ? (j.trigger(\"start\"), j.go()) : setTimeout(j.start, 50);\n  },  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return j;\n  }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}).call(this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pace.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/pace.min.js");
/******/ 	
/******/ })()
;